package tasks

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"regexp"
	"strconv"
	"strings"
	"time"
)

// KeycodeTask 按键码任务结构
type KeycodeTask struct {
	Original struct {
		Hostname string
		Path     string
		Method   string
	}
	Regex    *regexp.Regexp
	DestFile string
}

// NewKeycodeTask 创建新的按键码任务
func NewKeycodeTask() *KeycodeTask {
	return &KeycodeTask{
		Original: struct {
			Hostname string
			Path     string
			Method   string
		}{
			Hostname: "raw.github.com",
			Path:     "/android/platform_frameworks_base/master/core/java/android/view/KeyEvent.java",
			Method:   "GET",
		},
		Regex: regexp.MustCompile(`public static final int (KEYCODE_[^\s]+)\s*=\s*([0-9]+);`),
	}
}

// Execute 执行按键码任务
func (k *KeycodeTask) Execute(destFile string) error {
	k.DestFile = destFile
	return k.run()
}

// run 运行任务
func (k *KeycodeTask) run() error {
	// 创建HTTP请求
	url := fmt.Sprintf("https://%s%s", k.Original.Hostname, k.Original.Path)
	resp, err := http.Get(url)
	if err != nil {
		return fmt.Errorf("unable to retrieve KeyEvent.java: %v", err)
	}
	defer resp.Body.Close()

	// 检查响应状态
	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("unable to retrieve KeyEvent.java (HTTP %d)", resp.StatusCode)
	}

	// 读取响应内容
	content, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return fmt.Errorf("failed to read response: %v", err)
	}

	// 生成输出内容
	var output strings.Builder

	// 写入头部注释
	date := time.Now().UTC().Format(time.RFC1123)
	output.WriteString(fmt.Sprintf("// Generated by `go run tasks/keycode.go` on %s\n", date))
	output.WriteString("// KeyEvent.java Copyright (C) 2006 The Android Open Source Project\n\n")
	output.WriteString("package adb\n\n")
	output.WriteString("// Android key codes\nconst (\n")

	// 解析并写入按键码
	matches := k.Regex.FindAllStringSubmatch(string(content), -1)
	for _, match := range matches {
		keyName := match[1]
		keyValue, err := strconv.Atoi(match[2])
		if err != nil {
			return fmt.Errorf("invalid key value for %s: %v", keyName, err)
		}
		output.WriteString(fmt.Sprintf("\t%s = %d\n", keyName, keyValue))
	}

	output.WriteString(")\n")

	// 写入文件
	err = ioutil.WriteFile(k.DestFile, []byte(output.String()), 0644)
	if err != nil {
		return fmt.Errorf("failed to write output file: %v", err)
	}

	fmt.Printf("File %s created successfully\n", k.DestFile)
	return nil
}

// 使用示例
func ExampleUsage() {
	task := NewKeycodeTask()
	err := task.Execute("keycode.go")
	if err != nil {
		fmt.Printf("Error: %v\n", err)
		return
	}
}
